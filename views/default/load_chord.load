<style>


      #circle circle {
        fill: none;
        pointer-events: all;
      }
      path.group {
        fill-opacity: .5;
      }
      path.chord {
        fill-opacity: .5;
        stroke: #333;
        stroke-width: .25px;
      }
      #circle:hover path.fade {
        opacity: .8;

        display: none;
      }

</style>
   <div class="panel panel-primary">
      <div class="panel-heading">Chord Plot</div>
      <div  class="panel-body"><div id="_chord">
          
          </div>
</div>
</div>
<script>

   $(document).ready(function(error,data){
var tooltip = d3.select("body")
    .append("div")
    .style("position", "absolute")
    .style("z-index", "10")
    .style("visibility", "hidden")
    .style("color", "white")
    .style("padding", "8px")
    .style("background-color", "rgba(0, 0, 0, 0.75)")
    .style("border-radius", "6px")
    .style("font", "12px sans-serif");
        matrix={{=XML(mat)}}
        mmap={{=XML(mmap)}}
        cluster={{=XML(cluster)}}
       var w = 1170, h = 980, r1 = h / 2, r0 = r1 - 100;
        var fill=d3.scale.ordinal().range(["#9ACD32","#377DB8","#F5DEB3","#EE82EE","#40E0D0","#FF6347","#D8BFD8","#D2B48C","#999999","#4682B4","#00FF7F","#FFFAFA"
                                           ,"#708090","#708090","#6A5ACD","#87CEEB","#F781BF","#A0522D","#FFF5EE","#2E8B57","#F4A460","#FA8072","#E41A1C","#A65628","#FF7F00","#FFFF33","#984EA3"])
        //d3.scale.ordinal().range(['#c7b570','#c6cdc7','#335c64','#768935','#507282','#5c4a56','#aa7455','#574109','#837722','#73342d','#0a5564','#9c8f57','#7895a4','#4a5456','#b0a690','#0a3542',]);

        var chord = d3.layout.chord()
            .padding(.02)
            .sortSubgroups(d3.descending)
            .sortChords(d3.descending);

        var arc = d3.svg.arc()
            .innerRadius(r0)
            .outerRadius(r0 + 10);

        var svg = d3.select('#_chord').append("svg")
    .style("position", "relative")
            .style("width", w + "px")
            .style("height", h + "px")    
            .attr("width", w)
            .attr("height", h)
            .append("svg:g")
            .attr("id", "circle")
            .attr("transform", "translate(" + w / 2 + "," + h / 2 + ")");

            svg.append("circle")
                .attr("r", r0 + 10);

        var rdr = chordRdr(matrix, mmap);
        chord.matrix(matrix);
    
        var g = svg.selectAll("g.group")
            .data(chord.groups())
          .enter().append("svg:g")
            .attr("class", "group")
            .on("mouseover", mouseover)
        .on("mousemove", function() {
          return tooltip.style("top", (d3.event.pageY-10)+"px").style("left",(d3.event.pageX+10)+"px");
      })
            .on("mouseout", function (d) { 
                svg.selectAll("path.chord").attr("class", "chord").style("opacity",0.8) 
                tooltip.style("visibility", "hidden") 
            });
      function mouseover(d,i) {
          console.log(d)
          
          }
        g.append("svg:path")
            .style("fill", function(d) { return fill(rdr(d).gname); })
            .attr("d", arc);

        g.append("svg:text")
            .each(function(d) { d.angle = (d.startAngle + d.endAngle) / 2; })
            .attr("dy", ".35em")
            .style("font-family", "helvetica, arial, sans-serif")
            .style("font-size", "10px")
            .attr("text-anchor", function(d) { return d.angle > Math.PI ? "end" : null; })
            .attr("transform", function(d) {
              return "rotate(" + (d.angle * 180 / Math.PI - 90) + ")"
                  + "translate(" + (r0 + 20) + ")"
                  + (d.angle > Math.PI ? "rotate(180)" : "");
            })
            .text(function(d) {  return rdr(d).gname; });
          var chordPaths = svg.selectAll("path.chord")
                .data(chord.chords())
                .enter().append("svg:path")
                .attr("class", "chord")
                .style("stroke", function(d) { return d3.rgb(fill(rdr(d).sname)).darker(); })
                .style("fill", function(d) { return fill(rdr(d).sname); })
                .attr("d", d3.svg.chord().radius(r0))
          .on("mousemove", function() {
          return tooltip.style("top", (d3.event.pageY-10)+"px").style("left",(d3.event.pageX+10)+"px");
      })
                .on("mouseover", function (d) { 
                       tooltip
                    .style("visibility", "visible")
                    .html( rdr(d).sname+": "+mmap[rdr(d).sname].description+"<br>"+rdr(d).tname+": "+mmap[rdr(d).tname.split("(")[0]].description)
                    .style("top", function () { return (d3.event.pageY - 30)+"px"})
                    .style("left", function () { return (d3.event.pageX - 80)+"px";})
                      
                })
                .on("mouseout", function (d) { 
                    svg.selectAll("path.chord").attr("class", "chord").style("opacity",1)
                    tooltip.style("visibility", "hidden")
                });

      function mouseover(d,i) {
          var ids=rdr(d).gname.split("(")[0]
          var list_ids=cluster[ids].split(" ")
          var tooltip_string=""
          for(var j = 0; j < list_ids.length; j++) {
              tooltip_string+= "("+list_ids[j]+": "+mmap[list_ids[j]].description+")"+" "
          }
          tooltip
              .style("visibility", "visible")
              .html(ids+":"+mmap[ids].description+"<br>"+tooltip_string)
               .style("top", function () { return (d3.event.pageY - 30)+"px"})
               .style("left", function () { return (d3.event.pageX - 80)+"px";})
            chordPaths.classed("fade", function(p) {
              return p.source.index != i
                  && p.target.index != i;
            });
          }
      }
 );

</script>
